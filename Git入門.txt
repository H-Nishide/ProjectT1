■Gitの基本用語■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
https://zenn.dev/takumi_machino/articles/git-how-to-use

開発でよく使う基本的な用語をまとめた。
●ブランチ(branch)
メインの開発ラインとは別に新しい変更を試すための分岐。
ブランチを使うことで、他の作業に影響を与えずに新しい機能を開発したり、バグを修正したりすることが可能になる。
これにより、複数の開発者が同時に異なる機能等を実装できたりする。
:プロジェクトを枝分かれさせ、別の作業ができるようにする

●リポジトリ(repository)
ファイルやフォルダの履歴を管理するための場所。
この中にソースとか Git で管理してるものが存在する。

リモートリポジトリ：GitHub や GitBucket などのオンライン上にあるリポジトリ
　ローカルリポジトリ：自分の PC 内にあるリポジトリ。
:　データを収納する場所Clone（クローン）:リポジトリのクローン(複製)

●クローン(clone)
リモートリポジトリを自分の PC にコピーする。

●コミット（commit）
ローカルリポジトリに変更内容を保存すること。
ファイルを修正した後、コミットすることで、その変更が履歴として記録される。
:Master Branch（マスターブランチ）に変更データを保存する

●プッシュ（push）
ローカルリポジトリの変更をリモートリポジトリ（GitHub など）に送信する操作。
:リモートリポジトリにローカルリポジトリの変更内容を保存する

●衝突(conflict)
複数の開発者が同じファイルを異なるブランチで編集した場合、変更を統合する際に競合が発生すること。

プルリクエスト（pull request）
他の開発者に変更をレビューしてもらい、リポジトリに統合するための仕組み

●マージ（merge）
異なるブランチの変更を統合する操作。
:ブランチをMaster branch（マスターブランチ）へ結合する

●フェッチ（fetch）
リモートリポジトリの最新の変更をローカルに取得する操作。
ただし、この時点ではローカルの作業ツリーには影響しない。
:リモートリポジトリ内に新しく更新されているフォルダーがないか確認する

●プル（pull）
フェッチとマージ（変更の統合）を同時に行う操作。
リモートの変更をローカルに取り込むときに使う。
:リモートリポジトリから持っていないデータや更新内容をダウンロードする

●Conflict（コンフリクト）：変更内容の重複がある場合に出てくる警告
================================================================
　git-flow
================================================================
チーム開発でのブランチ管理を体系化したワークフロー。
開発の流れを明確にし、効率よくコードを管理するための手法。
それぞれのブランチには、以下の役割が存在する。

●main（メインブランチ）
　本番環境にデプロイされるコードを管理
●develop（開発ブランチ）
　開発中のコードを統合
●feature（機能ブランチ）
　新しい機能を開発
●release（リリースブランチ）
　本番環境にリリースする準備
●hotfix（ホットフィックス）
　緊急のバグ修正


================================================================
Git 操作が簡単にできるクライアントツール
================================================================
たくさんあるが、主に会社でよく使うツールを挙げていく。

GitBucket
GitHub ライクな機能を持つオープンソースの Git リポジトリ管理ツール。
プルリクやレビュー等々 GitHub でできるようなことは大体できる。

SourceTree（ソースツリー）
Git の操作を簡単に行える GUI（グラフィカルユーザーインターフェース）ツール。
ターミナルでコマンドを入力することなく、視覚的に Git の操作を行うことが可能。

GitHub
Git の仕組みをオンラインで使えるサービス。
自分の作成したコードをクラウド上に保存し、どこからでもアクセスできるようになる。
また、GitHub Actions（ギットハブ アクションズ）と呼ばれる、GitHub 上で自動的にコードのテストやデプロイを行うためのツールも存在する。


■コミットとは差分だ、Git入門者が知っておくべき概念■■■■■■■■■■■■■■■■■■■■■■■■■■
https://zenn.dev/dannykitadani/articles/61a24d770873f7

システム開発プロジェクト応用第一 第5,6回 Gitによるバージョン管理 - YouTube
https://www.youtube.com/watch?v=WMIiPcgGC4Q


●●●●●●●●●●●●●●●
●１．コミットとは差分だ
●●●●●●●●●●●●●●●

コミットとは「差分」や「変更」であると考えた方が、Gitを理解しやすいと思います。
git commitは、コミットを作成する、すなわち、リポジトリの歴史に新たな「差分」を積み重ねるコマンドです。

●●●●●●●●●●●●●●●
●２．コミットは自分の親コミットを知っている
●●●●●●●●●●●●●●●
コミットは、自分の親コミット（1つ過去のコミット）のIDをメタデータとして持っています。
そのため、コミットは自分より過去のコミットが数珠つなぎになった歴史を持つことになります。

●●●●●●●●●●●●●●●
●３．ブランチとは特定のコミットを指し示すものだ
●●●●●●●●●●●●●●●
ブランチとは特定のコミットを指し示すものだ
ブランチというと、何かそういう特別な空間があるのかと感じますが、そうではありません。
実際には特定のコミットを指し示すだけのものです。つまり、特定のコミットに別名を付けたようなものです。

●●●●●●●●●●●●●●●
●４．枝分かれする歴史
●●●●●●●●●●●●●●●
時には、複数のコミットが同じコミットを親に持つこともあります。
このとき、コミット履歴は枝分かれします。

●●●●●●●●●●●●●●●
●５．マージは過去のコミットを全部取り込む
●●●●●●●●●●●●●●●
親同じ→枝分かれ

●●●●●●●●●●●●●●●
●応用：コミットのリバート
●●●●●●●●●●●●●●●
ちょっとむずかしい。

■■■■■■■■■■■■■■■■■■■■■■■■■■
■リバートは「新しいコミットを作る」、
■マージは「両方の過去のコミットをすべて取り込む」という性質を持つことを十分理解して使用しましょう。

■最低限しておくといいgitconfigの設定■■■■■■■■■■■■■■■■■■■■■■■■■■
https://qiita.com/hayamofu/items/d8103e789196bcd8b489
git config --global user.name "{ユーザー名}"
git config --global user.email "{メールアドレス}"
ユーザー名とメールアドレスは、Githubのusernameとmailaddressとそろえるといい。

git config --global core.ignorecase false	falseにすると、ファイルの大文字・小文字を区別して認識する。

git config --global core.quotepath false
falseにすると、git statusで変更ファイル一覧を表示するときに、
日本語のファイル名が文字化けしないでちゃんと表示される。

git config --global core.safecrlf true
trueにすると、改行コードが混在している場合は変換しないというオプション。

git config --global core.autocrlf false
falseにすると、コミット・チェックアウト時に改行コードの変換を行わない。

git config --global core.editor 'C:\Program Files\Hidemaru\Hidemaru.exe' //cu8
現設定はVSCode、core.editor="C:\Users\AA004551\AppData\Local\Programs\Microsoft VS Code\bin\code" --wait
コミットするときにメッセージを編集する際に使用するエディタの設定。

git config --global push.default simple
simpleに設定しておくと安全。
カレントブランチと同名のリモートブランチが存在する場合のみ、カレントブランチのpushが行われる。

git config --global credential.helper wincred
Githubからソースを取得するのに、ユーザー名とパスワードを聞かれるが、
頻度が結構多いのでキャッシュしておく設定。★4月GA復帰後に設定予定


■Git初期設定■■■■■■■■■■■■■■■■■■■■■■■■■■
https://qiita.com/ucan-lab/items/aadbedcacbc2ac86a2b3

■入門　GitHubの使い方　■■■■■■■■■■■■■■■■■■■■■■■■■■
https://www.kagoya.jp/howto/it-glossary/develop/howtousegithub/
【リポジトリ作成の段取り】
１）4.リモートリポジトリを作成する
リモートリポジトリを作成します。
GitHub管理画面で、「Create Repository」ボタンをクリック

２）5.ローカルリポジトリを作成する
Git Bashで、以下コマンドを順番に実行します。リポジトリ名は任意です。

※ここでは「sample」という名前のローカルリポジトリを作成します。
mkdir github
cd github
mkdir sample
cd sample
git init　これでsampleディレクトリがローカルリポジトリになります。
ローカルリポジトリの作成が完了すると、以下のように表示されます。
＞Initialized empty Git repository in C:/Users/ディレクトリ名/github/sample/.git/


■gitコマンドを使ったブランチ作成からマージまでの流れ（GitHub Desktopとの比較あり）■■■■■■■■■■■■■■■■■■■■■■■■■■
https://qiita.com/yamaday0u/items/487c304ac63b693f4dfa

git branch
git branchは作成済みのブランチを一覧表示します。
現在選択されているbranchは先頭に'*'が付いています。

新しいブランチを作成します。
git branch second-branch master //masterブランチからsecond-branchを作成
git branch second-branch main //mainブランチからsecond-branchを作成 これはローカルの話

git checkout ブランチ名
ブランチを切り替えることができます。


ブランチをリモートに登録する
git push -u origin <作成したブランチ名>
 作成したブランチをリモートリポジトリに登録します。
 GitHub Desktopでいうpublish branchですね。

git push -u origin third-branch
Total 0 (delta 0), reused 0 (delta 0)
remote: 
remote: Create a pull request for 'third-branch' on GitHub by visiting:
remote:      https://github.com/ユーザー名/リポジトリ名/pull/new/third-branch
remote: 
To https://github.com/ユーザー名/リポジトリ名.git
 * [new branch]      third-branch -> third-branch
Branch 'third-branch' set up to track remote branch 'third-branch' from 'origin'.
★
Forkでsecond-branchをリモートに登録した。

リモートへpush byFork　実際に実行されたgitコマンド　＠＠はじまり
$ git push originClone refs/heads/second-branch --verbose

Enumerating objects: 5, done.
Delta compression using up to 12 threads
Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
POST git-receive-pack (559 bytes)
Pushing to https://github.com/H-Nishide/ProjectT1
To https://github.com/H-Nishide/ProjectT1
   eb844a9..ac2f059  second-branch -> second-branch
updating local tracking ref 'refs/remotes/originClone/second-branch'
＠＠ここまで
